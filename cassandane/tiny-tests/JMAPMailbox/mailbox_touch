#!perl
use Cassandane::Tiny;

sub test_mailbox_touch
     :JMAPExtensions
{
    my ($self) = @_;

    my $jmap = $self->{jmap};
    my $imaptalk = $self->{store}->get_client();

    $imaptalk->create("INBOX.foo") || die;
    $imaptalk->create("INBOX.bar") || die;

    # we need 'https://cyrusimap.org/ns/jmap/mail' capability /touch
    my @using = @{ $jmap->DefaultUsing() };
    push @using, 'https://cyrusimap.org/ns/jmap/mail';
    $jmap->DefaultUsing(\@using);

    xlog $self, "get all mailboxes";
    my $res = $jmap->CallMethods([['Mailbox/get', {}, "R1"]]);
    my %m = map { $_->{name} => $_ } @{$res->[0][1]{list}};
    my $inbox = $m{"Inbox"}{id};
    my $foo = $m{"foo"}{id};
    my $bar = $m{"bar"}{id};
    my $state = $res->[0][1]{'state'};

    xlog $self, "touch some mailboxes";
    $res = $jmap->CallMethods([
        ['Mailbox/touch', { ids => [ $inbox, $foo ] }, "R2"],
        ['Mailbox/touch', { ids => [ 'nonexistent' ] }, "R3"]
    ]);
    $self->assert_not_null($res);

    my $newState = $res->[0][1]{'state'};
    $self->assert_not_equals($state, $newState);
    $self->assert_null($res->[0][1]{notTouched});
    $self->assert_equals($newState, $res->[1][1]{'state'});
    $self->assert_equals('nonexistent', $res->[1][1]{notTouched}[0]);

    xlog $self, "get mailbox updates";
    $res = $jmap->CallMethods([
        ['Mailbox/changes', { sinceState => $state }, "R4"]
    ]);
    $self->assert_str_equals($state, $res->[0][1]->{oldState});
    $self->assert_str_equals($newState, $res->[0][1]->{newState});
    $self->assert_deep_equals([], $res->[0][1]{created});
    $self->assert_num_equals(2, scalar @{$res->[0][1]{updated}});
    $self->assert_str_equals($inbox, $res->[0][1]{updated}[0]);
    $self->assert_str_equals($foo, $res->[0][1]{updated}[1]);
    $self->assert_deep_equals([], $res->[0][1]{destroyed});
}
