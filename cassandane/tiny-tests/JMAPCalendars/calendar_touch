#!perl
use Cassandane::Tiny;

sub test_calendar_touch
     :JMAPExtensions
{
    my ($self) = @_;

    my $jmap = $self->{jmap};

    # we need 'https://cyrusimap.org/ns/jmap/calendars' capability /touch
    my @using = @{ $jmap->DefaultUsing() };
    push @using, 'https://cyrusimap.org/ns/jmap/calendars';
    $jmap->DefaultUsing(\@using);

    xlog $self, "create calendar";
    my $res = $jmap->CallMethods([
            ['Calendar/set', { create => {
                        "1" => {
                            name => "foo",
                            color => "coral",
                            sortOrder => 2,
                            isVisible => \1
                        },
                        "2" => {
                            name => "bar",
                            color => "aqua",
                            sortOrder => 3,
                            isVisible => \1
                        }
                    }}, "R1"]
    ]);

    my $id1 = $res->[0][1]{created}{"1"}{id};
    my $id2 = $res->[0][1]{created}{"2"}{id};
    my $state = $res->[0][1]{newState};

    xlog $self, "touch some calendars";
    $res = $jmap->CallMethods([
        ['Calendar/touch', { ids => [ 'Default', $id1 ] }, "R2"],
        ['Calendar/touch', { ids => [ 'nonexistent' ] }, "R3"]
    ]);
    $self->assert_not_null($res);

    my $newState = $res->[0][1]{'state'};
    $self->assert_not_equals($state, $newState);
    $self->assert_null($res->[0][1]{notTouched});
    $self->assert_equals($newState, $res->[1][1]{'state'});
    $self->assert_equals('nonexistent', $res->[1][1]{notTouched}[0]);

    xlog $self, "get mailbox updates";
    $res = $jmap->CallMethods([
        ['Calendar/changes', { sinceState => $state }, "R4"]
    ]);
    $self->assert_str_equals($state, $res->[0][1]->{oldState});
    $self->assert_str_equals($newState, $res->[0][1]->{newState});
    $self->assert_deep_equals([], $res->[0][1]{created});
    $self->assert_num_equals(2, scalar @{$res->[0][1]{updated}});

    my @exp = sort ('Default', $id1);
    $self->assert_deep_equals([ $exp[0], $exp[1] ], $res->[0][1]{updated});
    $self->assert_deep_equals([], $res->[0][1]{destroyed});
}
